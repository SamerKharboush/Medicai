{"ast":null,"code":"var _jsxFileName = \"/Users/samerkharboush/Downloads/test/Medicai/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [tokenRefreshTimeout, setTokenRefreshTimeout] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Validate token and get user info\n      validateToken();\n    } else {\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      if (tokenRefreshTimeout) {\n        clearTimeout(tokenRefreshTimeout);\n      }\n    };\n  }, []);\n  const setupTokenRefresh = token => {\n    try {\n      const decodedToken = jwtDecode(token);\n      const expirationTime = decodedToken.exp * 1000; // Convert to milliseconds\n      const currentTime = Date.now();\n      const timeUntilExpiry = expirationTime - currentTime;\n\n      // Refresh token 5 minutes before expiry\n      const refreshTime = timeUntilExpiry - 5 * 60 * 1000;\n      if (refreshTime > 0) {\n        const timeout = setTimeout(refreshToken, refreshTime);\n        setTokenRefreshTimeout(timeout);\n      } else {\n        // Token is already expired or about to expire\n        logout();\n      }\n    } catch (error) {\n      console.error('Error setting up token refresh:', error);\n      logout();\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post(`${API_URL}/auth/refresh`, null, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      });\n      const {\n        access_token\n      } = response.data;\n      if (access_token) {\n        localStorage.setItem('token', access_token);\n        setupTokenRefresh(access_token);\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      logout();\n    }\n  };\n  const validateToken = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      // Check if token is expired\n      const decodedToken = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decodedToken.exp < currentTime) {\n        throw new Error('Token expired');\n      }\n      const response = await axios.get(`${API_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      });\n      setCurrentUser(response.data);\n      setupTokenRefresh(token);\n    } catch (error) {\n      console.error('Token validation error:', error);\n      localStorage.removeItem('token');\n      setCurrentUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const formData = new URLSearchParams();\n      formData.append('username', email);\n      formData.append('password', password);\n      formData.append('grant_type', 'password');\n      console.log('Attempting login with credentials:', {\n        email\n      });\n      const response = await axios.post(`${API_URL}/auth/token`, formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Login response:', response.data);\n      const {\n        access_token\n      } = response.data;\n      if (access_token) {\n        localStorage.setItem('token', access_token);\n        setupTokenRefresh(access_token);\n\n        // Get user info\n        const userResponse = await axios.get(`${API_URL}/auth/me`, {\n          headers: {\n            'Authorization': `Bearer ${access_token}`,\n            'Accept': 'application/json'\n          }\n        });\n        console.log('User info:', userResponse.data);\n        setCurrentUser(userResponse.data);\n        return userResponse.data;\n      } else {\n        throw new Error('No access token received');\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Login error:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response5, _error$response5$data;\n      console.error('Registration error:', {\n        message: error.message,\n        response: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status\n      });\n      if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.detail) {\n        throw new Error(error.response.data.detail);\n      } else if (error.message === 'Network Error') {\n        throw new Error('Unable to connect to the server. Please try again.');\n      } else {\n        throw new Error('Registration failed. Please check your information and try again.');\n      }\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n    if (tokenRefreshTimeout) {\n      clearTimeout(tokenRefreshTimeout);\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"W09UdysKAa1ruUXVO+iQhSeWo+E=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","tokenRefreshTimeout","setTokenRefreshTimeout","token","localStorage","getItem","validateToken","clearTimeout","setupTokenRefresh","decodedToken","expirationTime","exp","currentTime","Date","now","timeUntilExpiry","refreshTime","timeout","setTimeout","refreshToken","logout","error","console","response","post","headers","access_token","data","setItem","get","removeItem","login","email","password","formData","URLSearchParams","append","log","userResponse","_error$response","_error$response2","message","status","register","userData","_error$response3","_error$response4","_error$response5","_error$response5$data","detail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samerkharboush/Downloads/test/Medicai/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [tokenRefreshTimeout, setTokenRefreshTimeout] = useState(null);\n\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Validate token and get user info\n      validateToken();\n    } else {\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      if (tokenRefreshTimeout) {\n        clearTimeout(tokenRefreshTimeout);\n      }\n    };\n  }, []);\n\n  const setupTokenRefresh = (token) => {\n    try {\n      const decodedToken = jwtDecode(token);\n      const expirationTime = decodedToken.exp * 1000; // Convert to milliseconds\n      const currentTime = Date.now();\n      const timeUntilExpiry = expirationTime - currentTime;\n      \n      // Refresh token 5 minutes before expiry\n      const refreshTime = timeUntilExpiry - (5 * 60 * 1000);\n      \n      if (refreshTime > 0) {\n        const timeout = setTimeout(refreshToken, refreshTime);\n        setTokenRefreshTimeout(timeout);\n      } else {\n        // Token is already expired or about to expire\n        logout();\n      }\n    } catch (error) {\n      console.error('Error setting up token refresh:', error);\n      logout();\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post(`${API_URL}/auth/refresh`, null, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json',\n        }\n      });\n\n      const { access_token } = response.data;\n      if (access_token) {\n        localStorage.setItem('token', access_token);\n        setupTokenRefresh(access_token);\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      logout();\n    }\n  };\n\n  const validateToken = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      // Check if token is expired\n      const decodedToken = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decodedToken.exp < currentTime) {\n        throw new Error('Token expired');\n      }\n\n      const response = await axios.get(`${API_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json',\n        }\n      });\n\n      setCurrentUser(response.data);\n      setupTokenRefresh(token);\n    } catch (error) {\n      console.error('Token validation error:', error);\n      localStorage.removeItem('token');\n      setCurrentUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const formData = new URLSearchParams();\n      formData.append('username', email);\n      formData.append('password', password);\n      formData.append('grant_type', 'password');\n      \n      console.log('Attempting login with credentials:', { email });\n      \n      const response = await axios.post(`${API_URL}/auth/token`, formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json',\n        }\n      });\n\n      console.log('Login response:', response.data);\n\n      const { access_token } = response.data;\n      if (access_token) {\n        localStorage.setItem('token', access_token);\n        setupTokenRefresh(access_token);\n        \n        // Get user info\n        const userResponse = await axios.get(`${API_URL}/auth/me`, {\n          headers: {\n            'Authorization': `Bearer ${access_token}`,\n            'Accept': 'application/json',\n          }\n        });\n        \n        console.log('User info:', userResponse.data);\n        setCurrentUser(userResponse.data);\n        return userResponse.data;\n      } else {\n        throw new Error('No access token received');\n      }\n    } catch (error) {\n      console.error('Login error:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      throw error;\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      \n      if (error.response?.data?.detail) {\n        throw new Error(error.response.data.detail);\n      } else if (error.message === 'Network Error') {\n        throw new Error('Unable to connect to the server. Please try again.');\n      } else {\n        throw new Error('Registration failed. Please check your information and try again.');\n      }\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n    if (tokenRefreshTimeout) {\n      clearTimeout(tokenRefreshTimeout);\n    }\n  };\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading,\n    refreshToken,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}